{"version":3,"sources":["../../../src/common/framework/test_group.ts"],"names":["SkipTestCase","UnexpectedPassError","extractPublicParams","mergeParams","compareQueries","Ordering","TestQuerySingleCase","kPathSeparator","stringifyPublicParams","stringifyPublicParamsUniquely","validQueryPart","assert","unreachable","makeTestGroup","fixture","TestGroup","makeTestGroupForUnitTesting","seen","Set","tests","constructor","iterate","checkName","name","decodeURIComponent","has","add","test","testCreationStack","Error","parts","split","p","TestBuilder","push","validate","caseParams","undefined","subcaseParams","testPath","desc","description","trim","fn","testFn","unimplemented","testPathString","join","s","stack","testcase","testcaseString","testcaseStringUnique","params","casesIterable","cases","Array","from","subcases","specs","RunCaseSpecific","subParamGen","id","runTest","rec","throwSkip","expectedStatus","beginSubCase","inst","init","finalize","ex","threw","endSubCase","message","warn","run","selfQuery","expectations","getExpectedStatus","selfQueryWithSubParams","didSeeFail","exp","ordering","query","Unordered","StrictSubset","expectation","start","totalCount","skipCount","subParams","info","subcaseQuery","suite","filePathParts","testPathParts","skipped","finish"],"mappings":"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","sourcesContent":["import { Fixture, SkipTestCase, UnexpectedPassError } from './fixture.js';\nimport { Expectation } from './logging/result.js';\nimport { TestCaseRecorder } from './logging/test_case_recorder.js';\nimport { TestParams, extractPublicParams, Merged, mergeParams } from './params_utils.js';\nimport { compareQueries, Ordering } from './query/compare.js';\nimport { TestQuerySingleCase, TestQueryWithExpectation } from './query/query.js';\nimport { kPathSeparator } from './query/separators.js';\nimport { stringifyPublicParams, stringifyPublicParamsUniquely } from './query/stringify_params.js';\nimport { validQueryPart } from './query/validQueryPart.js';\nimport { assert, unreachable } from './util/util.js';\n\nexport type RunFn = (\n  rec: TestCaseRecorder,\n  expectations?: TestQueryWithExpectation[]\n) => Promise<void>;\n\nexport interface TestCaseID {\n  readonly test: readonly string[];\n  readonly params: TestParams;\n}\n\nexport interface RunCase {\n  readonly id: TestCaseID;\n  run(\n    rec: TestCaseRecorder,\n    selfQuery: TestQuerySingleCase,\n    expectations: TestQueryWithExpectation[]\n  ): Promise<void>;\n}\n\n// Interface for defining tests\nexport interface TestGroupBuilder<F extends Fixture> {\n  test(name: string): TestBuilderWithName<F>;\n}\nexport function makeTestGroup<F extends Fixture>(fixture: FixtureClass<F>): TestGroupBuilder<F> {\n  return new TestGroup(fixture);\n}\n\n// Interfaces for running tests\nexport interface IterableTestGroup {\n  iterate(): Iterable<IterableTest>;\n  validate(): void;\n}\nexport interface IterableTest {\n  testPath: string[];\n  description: string | undefined;\n  readonly testCreationStack: Error;\n  iterate(): Iterable<RunCase>;\n}\n\nexport function makeTestGroupForUnitTesting<F extends Fixture>(\n  fixture: FixtureClass<F>\n): TestGroup<F> {\n  return new TestGroup(fixture);\n}\n\ntype FixtureClass<F extends Fixture = Fixture> = new (\n  log: TestCaseRecorder,\n  params: TestParams\n) => F;\ntype TestFn<F extends Fixture, P extends {}> = (t: F & { params: P }) => Promise<void> | void;\n\nclass TestGroup<F extends Fixture> implements TestGroupBuilder<F> {\n  private fixture: FixtureClass;\n  private seen: Set<string> = new Set();\n  private tests: Array<TestBuilder> = [];\n\n  constructor(fixture: FixtureClass) {\n    this.fixture = fixture;\n  }\n\n  iterate(): Iterable<IterableTest> {\n    return this.tests;\n  }\n\n  private checkName(name: string): void {\n    assert(\n      // Shouldn't happen due to the rule above. Just makes sure that treated\n      // unencoded strings as encoded strings is OK.\n      name === decodeURIComponent(name),\n      `Not decodeURIComponent-idempotent: ${name} !== ${decodeURIComponent(name)}`\n    );\n    assert(!this.seen.has(name), `Duplicate test name: ${name}`);\n\n    this.seen.add(name);\n  }\n\n  // TODO: This could take a fixture, too, to override the one for the group.\n  test(name: string): TestBuilderWithName<F> {\n    const testCreationStack = new Error(`Test created: ${name}`);\n\n    this.checkName(name);\n\n    const parts = name.split(kPathSeparator);\n    for (const p of parts) {\n      assert(validQueryPart.test(p), `Invalid test name part ${p}; must match ${validQueryPart}`);\n    }\n\n    const test = new TestBuilder(parts, this.fixture, testCreationStack);\n    this.tests.push(test);\n    return (test as unknown) as TestBuilderWithName<F>;\n  }\n\n  validate(): void {\n    for (const test of this.tests) {\n      test.validate();\n    }\n  }\n}\n\ninterface TestBuilderWithName<F extends Fixture> extends TestBuilderWithCases<F, {}> {\n  desc(description: string): this;\n  /** @deprecated use cases() and/or subcases() instead */\n  params<NewP extends TestParams>(specs: Iterable<NewP>): TestBuilderWithSubcases<F, NewP>;\n  cases<NewP extends TestParams>(specs: Iterable<NewP>): TestBuilderWithCases<F, NewP>;\n}\n\ninterface TestBuilderWithCases<F extends Fixture, P extends {}>\n  extends TestBuilderWithSubcases<F, P> {\n  subcases<SubP extends TestParams>(\n    specs: (_: P) => Iterable<SubP>\n  ): TestBuilderWithSubcases<F, Merged<P, SubP>>;\n}\n\ninterface TestBuilderWithSubcases<F extends Fixture, P extends {}> {\n  fn(fn: TestFn<F, P>): void;\n  unimplemented(): void;\n}\n\nclass TestBuilder {\n  readonly testPath: string[];\n  description: string | undefined;\n  readonly testCreationStack: Error;\n\n  private readonly fixture: FixtureClass;\n  private testFn: TestFn<Fixture, {}> | undefined;\n  private caseParams?: Iterable<{}> = undefined;\n  private subcaseParams?: (_: {}) => Iterable<{}> = undefined;\n\n  constructor(testPath: string[], fixture: FixtureClass, testCreationStack: Error) {\n    this.testPath = testPath;\n    this.fixture = fixture;\n    this.testCreationStack = testCreationStack;\n  }\n\n  desc(description: string): this {\n    this.description = description.trim();\n    return this;\n  }\n\n  fn(fn: TestFn<Fixture, {}>): void {\n    // TODO: add TODO if there's no description? (and make sure it only ends up on actual tests,\n    // not on test parents in the tree, which is what happens if you do it here, not sure why)\n    assert(this.testFn === undefined);\n    this.testFn = fn;\n  }\n\n  unimplemented(): void {\n    assert(this.testFn === undefined);\n\n    this.description =\n      (this.description ? this.description + '\\n\\n' : '') + 'TODO: .unimplemented()';\n\n    this.testFn = () => {\n      throw new SkipTestCase('test unimplemented');\n    };\n  }\n\n  validate(): void {\n    const testPathString = this.testPath.join(kPathSeparator);\n    assert(this.testFn !== undefined, () => {\n      let s = `Test is missing .fn(): ${testPathString}`;\n      if (this.testCreationStack.stack) {\n        s += `\\n-> test created at:\\n${this.testCreationStack.stack}`;\n      }\n      return s;\n    });\n\n    if (this.caseParams === undefined) {\n      return;\n    }\n\n    const seen = new Set<string>();\n    for (const testcase of this.caseParams) {\n      // stringifyPublicParams also checks for invalid params values\n      const testcaseString = stringifyPublicParams(testcase);\n\n      // A (hopefully) unique representation of a params value.\n      const testcaseStringUnique = stringifyPublicParamsUniquely(testcase);\n      assert(\n        !seen.has(testcaseStringUnique),\n        `Duplicate public test case params for test ${testPathString}: ${testcaseString}`\n      );\n      seen.add(testcaseStringUnique);\n    }\n  }\n\n  params(casesIterable: Iterable<{}>): TestBuilder {\n    return this.cases(casesIterable);\n  }\n\n  cases(casesIterable: Iterable<{}>): TestBuilder {\n    assert(this.caseParams === undefined, 'test case is already parameterized');\n    this.caseParams = Array.from(casesIterable);\n    return this;\n  }\n\n  subcases(specs: (_: {}) => Iterable<{}>): TestBuilder {\n    assert(this.subcaseParams === undefined, 'test subcases are already parameterized');\n    this.subcaseParams = specs;\n    return this;\n  }\n\n  *iterate(): IterableIterator<RunCase> {\n    assert(this.testFn !== undefined, 'No test function (.fn()) for test');\n    for (const params of this.caseParams || [{}]) {\n      yield new RunCaseSpecific(\n        this.testPath,\n        params,\n        this.subcaseParams,\n        this.fixture,\n        this.testFn,\n        this.testCreationStack\n      );\n    }\n  }\n}\n\nclass RunCaseSpecific implements RunCase {\n  readonly id: TestCaseID;\n\n  private readonly params: {};\n  private readonly subParamGen?: (_: {}) => Iterable<{}>;\n  private readonly fixture: FixtureClass;\n  private readonly fn: TestFn<Fixture, {}>;\n  private readonly testCreationStack: Error;\n\n  constructor(\n    testPath: string[],\n    params: {},\n    subParamGen: ((_: {}) => Iterable<{}>) | undefined,\n    fixture: FixtureClass,\n    fn: TestFn<Fixture, {}>,\n    testCreationStack: Error\n  ) {\n    this.id = { test: testPath, params: extractPublicParams(params) };\n    this.params = params;\n    this.subParamGen = subParamGen;\n    this.fixture = fixture;\n    this.fn = fn;\n    this.testCreationStack = testCreationStack;\n  }\n\n  async runTest(\n    rec: TestCaseRecorder,\n    params: {},\n    throwSkip: boolean,\n    expectedStatus: Expectation\n  ): Promise<void> {\n    try {\n      rec.beginSubCase();\n      if (expectedStatus === 'skip') {\n        throw new SkipTestCase('Skipped by expectations');\n      }\n      const inst = new this.fixture(rec, params);\n\n      try {\n        await inst.init();\n        /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n        await this.fn(inst as any);\n      } finally {\n        // Runs as long as constructor succeeded, even if initialization or the test failed.\n        await inst.finalize();\n      }\n    } catch (ex) {\n      // There was an exception from constructor, init, test, or finalize.\n      // An error from init or test may have been a SkipTestCase.\n      // An error from finalize may have been an eventualAsyncExpectation failure\n      // or unexpected validation/OOM error from the GPUDevice.\n      if (throwSkip && ex instanceof SkipTestCase) {\n        throw ex;\n      }\n      rec.threw(ex);\n    } finally {\n      try {\n        rec.endSubCase(expectedStatus);\n      } catch (ex) {\n        assert(ex instanceof UnexpectedPassError);\n        ex.message = `Testcase passed unexpectedly.`;\n        ex.stack = this.testCreationStack.stack;\n        rec.warn(ex);\n      }\n    }\n  }\n\n  async run(\n    rec: TestCaseRecorder,\n    selfQuery: TestQuerySingleCase,\n    expectations: TestQueryWithExpectation[]\n  ): Promise<void> {\n    const getExpectedStatus = (selfQueryWithSubParams: TestQuerySingleCase) => {\n      let didSeeFail = false;\n      for (const exp of expectations) {\n        const ordering = compareQueries(exp.query, selfQueryWithSubParams);\n        if (ordering === Ordering.Unordered || ordering === Ordering.StrictSubset) {\n          continue;\n        }\n\n        switch (exp.expectation) {\n          // Skip takes precendence. If there is any expectation indicating a skip,\n          // signal it immediately.\n          case 'skip':\n            return 'skip';\n          case 'fail':\n            // Otherwise, indicate that we might expect a failure.\n            didSeeFail = true;\n            break;\n          default:\n            unreachable();\n        }\n      }\n      return didSeeFail ? 'fail' : 'pass';\n    };\n\n    rec.start();\n    if (this.subParamGen) {\n      let totalCount = 0;\n      let skipCount = 0;\n      for (const subParams of this.subParamGen(this.params)) {\n        rec.info(new Error('subcase: ' + stringifyPublicParams(subParams)));\n        try {\n          const params = mergeParams(this.params, subParams);\n          const subcaseQuery = new TestQuerySingleCase(\n            selfQuery.suite,\n            selfQuery.filePathParts,\n            selfQuery.testPathParts,\n            params\n          );\n          await this.runTest(rec, params, true, getExpectedStatus(subcaseQuery));\n        } catch (ex) {\n          if (ex instanceof SkipTestCase) {\n            // Convert SkipTestCase to info messages\n            ex.message = 'subcase skipped: ' + ex.message;\n            rec.info(ex);\n            ++skipCount;\n          } else {\n            // Since we are catching all error inside runTest(), this should never happen\n            rec.threw(ex);\n          }\n        }\n        ++totalCount;\n      }\n      if (skipCount === totalCount) {\n        rec.skipped(new SkipTestCase('all subcases were skipped'));\n      }\n    } else {\n      await this.runTest(rec, this.params, false, getExpectedStatus(selfQuery));\n    }\n    rec.finish();\n  }\n}\n"],"file":"test_group.js"}