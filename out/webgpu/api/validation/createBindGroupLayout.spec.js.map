{"version":3,"sources":["../../../../src/webgpu/api/validation/createBindGroupLayout.spec.ts"],"names":["description","poptions","params","makeTestGroup","kMaxBindingsPerBindGroup","kShaderStages","kShaderStageCombinations","kTextureViewDimensions","allBindingEntries","bindingTypeInfo","bufferBindingTypeInfo","kBufferBindingTypes","ValidationTest","clone","descriptor","JSON","parse","stringify","g","test","desc","subcases","numbers","valid","fn","t","bindings","entries","binding","push","visibility","GPUShaderStage","COMPUTE","buffer","type","expectValidationError","device","createBindGroupLayout","cases","entry","info","success","validStages","undefined","viewDimension","texture","multisampled","combine","extraDynamicBuffers","staticBuffers","dynamicBufferCount","perPipelineLimitClass","maxDynamic","i","hasDynamicOffset","pickExtraBindingTypesForPerStage","extraTypeSame","extra","extraInfo","perStageLimitClass","class","sampler","subcasesForMaxResourcesPerStageTests","caseParams","filter","p","maxedEntry","maxedVisibility","expand","extraEntry","extraVisibility","cp","maxedTypeInfo","maxedCount","max","maxResourceBindings","goodDescriptor","newDescriptor","shouldError","extraTypeInfo","goodLayout","createPipelineLayout","bindGroupLayouts","extraLayout","newBindingCountsTowardSamePerStageLimit","layoutExceedsPerStageLimit"],"mappings":"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","sourcesContent":["export const description = `\ncreateBindGroupLayout validation tests.\n\nTODO: make sure tests are complete.\n`;\n\nimport { poptions, params } from '../../../common/framework/params_builder.js';\nimport { makeTestGroup } from '../../../common/framework/test_group.js';\nimport {\n  kMaxBindingsPerBindGroup,\n  kShaderStages,\n  kShaderStageCombinations,\n  kTextureViewDimensions,\n  allBindingEntries,\n  bindingTypeInfo,\n  bufferBindingTypeInfo,\n  kBufferBindingTypes,\n  BGLEntry,\n} from '../../capability_info.js';\n\nimport { ValidationTest } from './validation_test.js';\n\nfunction clone<T extends GPUBindGroupLayoutDescriptor>(descriptor: T): T {\n  return JSON.parse(JSON.stringify(descriptor));\n}\n\nexport const g = makeTestGroup(ValidationTest);\n\ng.test('duplicate_bindings')\n  .desc('Test that uniqueness of binding numbers across entries is enforced.')\n  .subcases(() =>\n    poptions('bindings', [\n      { numbers: [0, 1], valid: true },\n      { numbers: [0, 0], valid: false },\n    ])\n  )\n  .fn(async t => {\n    const { bindings } = t.params;\n    const entries: Array<GPUBindGroupLayoutEntry> = [];\n\n    for (const binding of bindings.numbers) {\n      entries.push({\n        binding,\n        visibility: GPUShaderStage.COMPUTE,\n        buffer: { type: 'storage' as const },\n      });\n    }\n\n    t.expectValidationError(() => {\n      t.device.createBindGroupLayout({\n        entries,\n      });\n    }, !bindings.valid);\n  });\n\ng.test('visibility')\n  .desc(\n    `\n    Test that only the appropriate combinations of visibilities are allowed for each resource type.\n    - Test each possible combination of shader stage visibilities.\n    - Test each type of bind group resource.`\n  )\n  .cases(poptions('visibility', kShaderStageCombinations))\n  .subcases(() => poptions('entry', allBindingEntries(false)))\n  .fn(async t => {\n    const { visibility, entry } = t.params;\n    const info = bindingTypeInfo(entry);\n\n    const success = (visibility & ~info.validStages) === 0;\n\n    t.expectValidationError(() => {\n      t.device.createBindGroupLayout({\n        entries: [{ binding: 0, visibility, ...entry }],\n      });\n    }, !success);\n  });\n\ng.test('multisampled_validation')\n  .desc('Test that multisampling is only allowed with \"2d\" view dimensions.')\n  .subcases(() => poptions('viewDimension', [undefined, ...kTextureViewDimensions]))\n  .fn(async t => {\n    const { viewDimension } = t.params;\n\n    const success = viewDimension === '2d' || viewDimension === undefined;\n\n    t.expectValidationError(() => {\n      t.device.createBindGroupLayout({\n        entries: [\n          {\n            binding: 0,\n            visibility: GPUShaderStage.COMPUTE,\n            texture: { multisampled: true, viewDimension },\n          },\n        ],\n      });\n    }, !success);\n  });\n\ng.test('max_dynamic_buffers')\n  .desc(\n    `\n    Test that limits on the maximum number of dynamic buffers are enforced.\n    - Test creation of a bind group layout using the maximum number of dynamic buffers works.\n    - Test creation of a bind group layout using the maximum number of dynamic buffers + 1 fails.\n    - TODO(#230): Update to enforce per-stage and per-pipeline-layout limits on BGLs as well.`\n  )\n  .cases(poptions('type', kBufferBindingTypes))\n  .subcases(() =>\n    params()\n      .combine(poptions('extraDynamicBuffers', [0, 1]))\n      .combine(poptions('staticBuffers', [0, 1]))\n  )\n  .fn(async t => {\n    const { type, extraDynamicBuffers, staticBuffers } = t.params;\n    const info = bufferBindingTypeInfo({ type });\n\n    const dynamicBufferCount = info.perPipelineLimitClass.maxDynamic + extraDynamicBuffers;\n\n    const entries = [];\n    for (let i = 0; i < dynamicBufferCount; i++) {\n      entries.push({\n        binding: i,\n        visibility: GPUShaderStage.COMPUTE,\n        buffer: { type, hasDynamicOffset: true },\n      });\n    }\n\n    for (let i = dynamicBufferCount; i < dynamicBufferCount + staticBuffers; i++) {\n      entries.push({\n        binding: i,\n        visibility: GPUShaderStage.COMPUTE,\n        buffer: { type, hasDynamicOffset: false },\n      });\n    }\n\n    const descriptor = {\n      entries,\n    };\n\n    t.expectValidationError(() => {\n      t.device.createBindGroupLayout(descriptor);\n    }, extraDynamicBuffers > 0);\n  });\n\n/**\n * One bind group layout will be filled with kPerStageBindingLimit[...] of the type |type|.\n * For each item in the array returned here, a case will be generated which tests a pipeline\n * layout with one extra bind group layout with one extra binding. That extra binding will have:\n *\n *   - If extraTypeSame, any of the binding types which counts toward the same limit as |type|.\n *     (i.e. 'storage-buffer' <-> 'readonly-storage-buffer').\n *   - Otherwise, an arbitrary other type.\n */\nfunction* pickExtraBindingTypesForPerStage(\n  entry: BGLEntry,\n  extraTypeSame: boolean\n): IterableIterator<BGLEntry> {\n  if (extraTypeSame) {\n    const info = bindingTypeInfo(entry);\n    for (const extra of allBindingEntries(false)) {\n      const extraInfo = bindingTypeInfo(extra);\n      if (info.perStageLimitClass.class === extraInfo.perStageLimitClass.class) {\n        yield extra;\n      }\n    }\n  } else {\n    return entry.sampler ? { texture: {} } : { sampler: {} };\n  }\n}\n\nfunction subcasesForMaxResourcesPerStageTests(caseParams: { maxedEntry: BGLEntry }) {\n  return params()\n    .combine(poptions('maxedVisibility', kShaderStages))\n    .filter(p => (bindingTypeInfo(caseParams.maxedEntry).validStages & p.maxedVisibility) !== 0)\n    .expand(function* () {\n      yield* poptions('extraEntry', pickExtraBindingTypesForPerStage(caseParams.maxedEntry, true));\n      yield* poptions('extraEntry', pickExtraBindingTypesForPerStage(caseParams.maxedEntry, false));\n    })\n    .combine(poptions('extraVisibility', kShaderStages))\n    .filter(p => (bindingTypeInfo(p.extraEntry).validStages & p.extraVisibility) !== 0);\n}\n\n// Should never fail unless kMaxBindingsPerBindGroup is exceeded, because the validation for\n// resources-of-type-per-stage is in pipeline layout creation.\ng.test('max_resources_per_stage,bind_group_layout')\n  .desc(\n    `\n    Test that the maximum number of bindings of a given type per-stage cannot be exceeded in a\n    single bind group layout.\n    - Test each binding type.\n    - Test that creation of a bind group layout using the maximum number of bindings works.\n    - Test that creation of a bind group layout using the maximum number of bindings + 1 fails.\n    - TODO(#230): Update to enforce per-stage and per-pipeline-layout limits on BGLs as well.`\n  )\n  .cases(poptions('maxedEntry', allBindingEntries(false)))\n  .subcases(cp => subcasesForMaxResourcesPerStageTests(cp))\n  .fn(async t => {\n    const { maxedEntry, extraEntry, maxedVisibility, extraVisibility } = t.params;\n    const maxedTypeInfo = bindingTypeInfo(maxedEntry);\n    const maxedCount = maxedTypeInfo.perStageLimitClass.max;\n\n    const maxResourceBindings: GPUBindGroupLayoutEntry[] = [];\n    for (let i = 0; i < maxedCount; i++) {\n      maxResourceBindings.push({\n        binding: i,\n        visibility: maxedVisibility,\n        ...maxedEntry,\n      });\n    }\n\n    const goodDescriptor = { entries: maxResourceBindings };\n\n    // Control\n    t.device.createBindGroupLayout(goodDescriptor);\n\n    const newDescriptor = clone(goodDescriptor);\n    newDescriptor.entries.push({\n      binding: maxedCount,\n      visibility: extraVisibility,\n      ...extraEntry,\n    });\n\n    const shouldError = maxedCount >= kMaxBindingsPerBindGroup;\n\n    t.expectValidationError(() => {\n      t.device.createBindGroupLayout(newDescriptor);\n    }, shouldError);\n  });\n\n// One pipeline layout can have a maximum number of each type of binding *per stage* (which is\n// different for each type). Test that the max works, then add one more binding of same-or-different\n// type and same-or-different visibility.\ng.test('max_resources_per_stage,pipeline_layout')\n  .desc(\n    `\n    Test that the maximum number of bindings of a given type per-stage cannot be exceeded across\n    multiple bind group layouts when creating a pipeline layout.\n    - Test each binding type.\n    - Test that creation of a pipeline using the maximum number of bindings works.\n    - Test that creation of a pipeline using the maximum number of bindings + 1 fails.\n  `\n  )\n  .cases(poptions('maxedEntry', allBindingEntries(false)))\n  .subcases(cp => subcasesForMaxResourcesPerStageTests(cp))\n  .fn(async t => {\n    const { maxedEntry, extraEntry, maxedVisibility, extraVisibility } = t.params;\n    const maxedTypeInfo = bindingTypeInfo(maxedEntry);\n    const maxedCount = maxedTypeInfo.perStageLimitClass.max;\n    const extraTypeInfo = bindingTypeInfo(extraEntry);\n\n    const maxResourceBindings: GPUBindGroupLayoutEntry[] = [];\n    for (let i = 0; i < maxedCount; i++) {\n      maxResourceBindings.push({\n        binding: i,\n        visibility: maxedVisibility,\n        ...maxedEntry,\n      });\n    }\n\n    const goodLayout = t.device.createBindGroupLayout({ entries: maxResourceBindings });\n\n    // Control\n    t.device.createPipelineLayout({ bindGroupLayouts: [goodLayout] });\n\n    const extraLayout = t.device.createBindGroupLayout({\n      entries: [\n        {\n          binding: 0,\n          visibility: extraVisibility,\n          ...extraEntry,\n        },\n      ],\n    });\n\n    // Some binding types use the same limit, e.g. 'storage-buffer' and 'readonly-storage-buffer'.\n    const newBindingCountsTowardSamePerStageLimit =\n      (maxedVisibility & extraVisibility) !== 0 &&\n      maxedTypeInfo.perStageLimitClass.class === extraTypeInfo.perStageLimitClass.class;\n    const layoutExceedsPerStageLimit = newBindingCountsTowardSamePerStageLimit;\n\n    t.expectValidationError(() => {\n      t.device.createPipelineLayout({ bindGroupLayouts: [goodLayout, extraLayout] });\n    }, layoutExceedsPerStageLimit);\n  });\n"],"file":"createBindGroupLayout.spec.js"}